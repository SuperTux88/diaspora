#!/bin/bash
### BEGIN INIT INFO
# Provides:		diaspora
# Required-Start:	$local_fs $remote_fs $all
# Required-Stop:	$local_fs $remote_fs
# Should-Start:		$network
# Should-Stop:		$network
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	Diaspora server components
# Description:		Starts the Diaspora server components
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DIASPORA_DIR=/srv/diaspora
DIASPORA_RUN_DIR=/var/run/diaspora
PID=$DIASPORA_RUN_DIR/diaspora.pid
USERNAME="diaspora"

if [[ "$USERNAME" != "$LOGNAME" ]]; then
  if [ $EUID -eq 0 -a ! -d "$DIASPORA_RUN_DIR" ]; then
    mkdir $DIASPORA_RUN_DIR
    chown $USERNAME:$USERNAME $DIASPORA_RUN_DIR
  fi
  echo "change user to $USERNAME"
  chown $USERNAME:$USERNAME -R $DIASPORA_DIR
  su - $USERNAME -c "$0 $1"
  exit $?
fi

if [ -f "/etc/default/diaspora" ]; then
  source "/etc/default/diaspora"
fi

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

cd $DIASPORA_DIR

. /lib/lsb/init-functions

function warning() {
  echo "WARNING: $1" >&2
}

function fatal() {
  echo "FATAL: $1" >&2
  exit 1
}

function on_failure() {
  if [ $? != 0 ]
  then
    fatal "$1"
  fi
}

# Setup environment
if [ -z "$RAILS_ENV" ]; then
  RAILS_ENV=$(bin/bundle exec ruby ./script/get_config.rb server.rails_environment)
  on_failure "Couldn't parse config/diaspora.yml!"
  export RAILS_ENV
fi

os=`uname -s`
eval $(bundle exec ruby ./script/get_config.rb \
  single_process_mode=environment.single_process_mode? \
  embed_sidekiq_worker=server.embed_sidekiq_worker \
  workers=server.sidekiq_workers
)

if [ -z "$DB" ]; then
  DB="mysql"
  export DB
fi

function get_sidekiq_pid() {
  ps -o %p,%a -U $USERNAME | grep sidekiq | grep -v grep | cut -f1 -d,
}

function start_checks() {

  # Check if database.yml exists
  if [ ! -e "config/database.yml" ]
  then
    fatal "config/database.yml is missing! Copy over config/database.yml.example to config/database.yml and edit it properly!"
  fi

  # Check if diaspora.yml exists
  if [ ! -e "config/diaspora.yml" ]
  then
    fatal "config/diaspora.yml is missing! Copy over config/diaspora.yml.example to config/diaspora.yml and edit it properly!"
  fi
    
  # Check if assets are precompiled
  if [ "$RAILS_ENV" = "production" -a -z "$(find public/assets -maxdepth 1 -name 'home-*.css' -print -quit)" ]
  then
    fatal "You're running in production mode without having assets
precompiled. Now and after each update before you restart the
application, run:
    bin/rake assets:precompile"
  fi

  # Check for old curl versions (see https://github.com/diaspora/diaspora/issues/4202)
  if [ `curl -V | grep AsynchDNS | wc -l` -ne 1 ]
  then
    warning "
*****************************************************************
curl does not support async DNS, this can cause Sidekiq to crash!
Please update curl to version 7.32, see issue
https://github.com/diaspora/diaspora/issues/4202 for details
*****************************************************************
"
  fi

  command -v git > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    # Check if git merge is in progress
    if [ -f .git/MERGE_MODE ]; then
      fatal "A git merge is in progress!"
    fi

    # Check if detached head state
    git_branch_name="$(git symbolic-ref HEAD 2>/dev/null)"
    if [ -z "$git_branch_name" ];
    then
      warning "You are in detached HEAD state!"
    fi
  fi

  # Do RVM checks if RVM is being used
  command -v rvm > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    rvm_gemset="$(rvm current | cut -d"@" -f2)"
    project_gemset="$(cat .ruby-gemset | tr -d " \t\n\r")"
    if [ "$rvm_gemset" != "$project_gemset" ]; then
      warning "Project gemset is $project_gemset but you are using $rvm_gemset"
    fi
  fi

  # Check if bundle is complete
  if ! bundle check > /dev/null
  then
    fatal "Your bundle is not up to date, run the command \"bundle install\""
  fi
}

function start_sidekiq() {
  if [ "$single_process_mode" != "true" ] && [ "$embed_sidekiq_worker" != "true" ]; then
    echo "Starting Sidekiq ..."
    echo "--- Starting: $(date)" >>log/sidekiq.bundle.log &
    cgexec -g memory:limited bundle exec sidekiq &>> log/sidekiq.log &
  fi
}

function stop_sidekiq() {
  if [ `get_sidekiq_pid | wc -l` -gt 0 ]; then
    echo -n "Stopping Sidekiq ."
    get_sidekiq_pid | while read line; do
      kill $line
    done

    timeout="0"
    while [ `get_sidekiq_pid | wc -l` -gt 0 ]; do
      if [ "$timeout" -gt "30" ]; then
        echo -n "#"
        get_sidekiq_pid | while read line; do
          kill -9 $line
        done
      else
        timeout=$[$timeout+1]
        echo -n "."
        sleep 1
      fi
    done
    echo
  fi
}

function start_services() {
  echo "Start Services: "
  start_sidekiq

  echo "Starting Puma ... "
  bundle exec pumactl -F config/puma.rb start &>> log/puma.log
}

function stop_services() {
  echo "Stop Services: "
  echo -n "Stopping Puma ..."
  bundle exec pumactl -F config/puma.rb stop &>> log/puma.log

  stop_sidekiq
}

function restart_services() {
  echo "Restart Services: "

  stop_sidekiq
  start_sidekiq

  echo "Restart Puma ..."
  bundle exec pumactl -F config/puma.rb restart &>> log/puma.log
}

function service_status() {
  if status_of_proc -p $PID puma > /dev/null; then
    echo "Puma is running"
  else
    echo "Puma is not running"
  fi

  if status_of_proc -p /var/run/redis/redis-server.pid redis > /dev/null; then
    echo "Redis is running"
  else
    echo "Redis is not running"
  fi

  if [ `get_sidekiq_pid | wc -l` -ne "0" ] ; then
    echo "Sidekiq is running"
  else
    echo "Sidekiq is not running"
  fi
}

case "$1" in
  start)
    start_checks
    start_services
    sleep 2
    echo
    service_status
  ;;
  stop)
    stop_services
    echo
    service_status
  ;;
  restart)
    restart_services
    sleep 2
    echo
    service_status
  ;;
  status)
    service_status
  ;;
  *)
    echo "Usage: diaspora {start|stop|restart|status}"
    exit 1
  ;;
esac

exit 0
