#!/bin/bash
### BEGIN INIT INFO
# Provides:		diaspora
# Required-Start:	$local_fs $remote_fs $all
# Required-Stop:	$local_fs $remote_fs
# Should-Start:		$network
# Should-Stop:		$network
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	Diaspora server components
# Description:		Starts the Diaspora server components
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DIASPORA_DIR=/srv/diaspora
UNICORN_RUN_DIR=/var/run/diaspora
PID=$UNICORN_RUN_DIR/diaspora.pid
USERNAME="diaspora"

if [[ "$USERNAME" != "$LOGNAME" ]]; then
  if [ $EUID -eq 0 -a ! -d "$UNICORN_RUN_DIR" ]; then
    mkdir $UNICORN_RUN_DIR
    chown $USERNAME:$USERNAME $UNICORN_RUN_DIR
  fi
  echo "change user to $USERNAME"
  chown $USERNAME:$USERNAME -R $DIASPORA_DIR
  su - $USERNAME -c "$0 $1"
  exit $?
fi

if [ -f "/etc/default/diaspora" ]; then
  source "/etc/default/diaspora"
fi

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

cd $DIASPORA_DIR

. /lib/lsb/init-functions

# Setup environment
if [ -z "$RAILS_ENV" ]; then
  RAILS_ENV=$(bundle exec ruby ./script/get_config.rb server.rails_environment)
  export RAILS_ENV
fi

os=`uname -s`
eval $(bundle exec ruby ./script/get_config.rb \
  port=server.port \
  single_process_mode=environment.single_process_mode? \
  embed_sidekiq_worker=server.embed_sidekiq_worker
)

if [ -z "$DB" ]; then
  DB="mysql"
  export DB
fi

# Check if already running/port blocked
function chk_service {
  port=${1:?Missing port}
  case $os in
  *[Bb][Ss][Dd]*|Darwin)
      ## checks ipv[46]
      netstat -anL | awk '{print $2}' | grep "\.$1$"
  ;;
  *)
      # Is someone listening on the ports already? (ipv4 only test ?)
      netstat -nl | grep '[^:]:'$port'[ \t]'
  ;;
  esac
}

function get_sidekiq_pid {
  ps -o %p,%a -U $USERNAME | grep sidekiq | grep -v grep | cut -f1 -d,
}

function start_checks {
  # Is someone listening on the ports already? (ipv4 only test ?)
  services=$( chk_service $port )
  if [ -n "$services" ]; then
    echo "FATAL: Error: port $port is already in use. Exiting" >&2
    echo "     $services"
    exit 64
  fi

  # Check if database.yml exists
  if [ ! -e 'config/database.yml' ]; then
    echo 'FATAL: config/database.yml is missing! Copy over config/database.yml.example to config/database.yml and edit it properly!' >&2
    exit 68
  fi
    
  # Check if assets are precompiled
  if [ "$RAILS_ENV" = "production" -a -z "$(find public/assets -maxdepth 1 -name 'home-*.css' -print -quit)" ]; then
    echo "FATAL: You're running in production mode without having assets precompiled." >&2
    echo "Now and after each update before you restart the application, run:" >&2
    echo "bin/rake assets:precompile" >&2
    exit 71
  fi
}

function start_sidekiq {
  if [ "$single_process_mode" != "true" ] && [ "$embed_sidekiq_worker" != "true" ]; then
    echo -n "Sidekiq ... "
    echo "--- Starting: $(date)" >>log/sidekiq.bundle.log &
    bundle exec sidekiq &>> log/sidekiq.log &
  fi
}

function stop_sidekiq {
  if [ `get_sidekiq_pid | wc -l` > 0 ] ; then
    echo -n "Sidekiq ... "
    get_sidekiq_pid | while read line; do
      kill $line
    done
  fi
}

function start_services {
  echo -n "Starting: "

  start_sidekiq

  echo "Unicorn ... "
  bundle exec unicorn_rails -c config/unicorn.rb -D
}

function stop_services {
  echo -n "Stopping Services: "
  echo -n "Unicorn ... "
  kill -QUIT `cat $PID`

  stop_sidekiq
}

function restart_services {
  echo -n "Restart Services: "

  echo -n "Stop "
  stop_sidekiq
  sleep 2
  echo -n "Start "
  start_sidekiq

  echo -n "Unicorn ... "
  kill -USR2 `cat $PID`
}

function service_status {
  if status_of_proc -p $PID unicorn_rails > /dev/null; then
    echo "Unicorn is running"
  else
    echo "Unicorn is not running"
  fi

  if status_of_proc -p /var/run/redis/redis-server.pid redis > /dev/null; then
    echo "Redis is running"
  else
    echo "Redis is not running"
  fi

  if [ `get_sidekiq_pid | wc -l` -ne "0" ] ; then
    echo "Sidekiq is running"
  else
    echo "Sidekiq is not running"
  fi
}

case "$1" in
  start)
    start_checks
    start_services
    sleep 2
    echo
    service_status
  ;;
  stop)
    stop_services
    sleep 2
    echo
    service_status
  ;;
  restart)
    restart_services
    sleep 2
    echo
    service_status
  ;;
  status)
    service_status
  ;;
  *)
    echo "Usage: diaspora {start|stop|restart|status}"
    exit 1
  ;;
esac

exit 0
